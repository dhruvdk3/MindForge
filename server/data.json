[{"_id":"65a636bc1e250afdee0465cb","title":"Two Sum","slug":"lc-two-sum","description":"`https://leetcode.com/problems/two-sum/description/`\r\n\r\n\r\nHash Table \r\nIntuition\r\n\r\nTo improve our runtime complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to get its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.\r\n\r\nWe can reduce the lookup time from O(n) to O(1) by trading space for speed. A hash table is well suited for this purpose because it supports fast lookup in near constant time. I say \"near\" because if a collision occurred, a lookup could degenerate to O(n) time. However, lookup in a hash table should be amortized O(1) time as long as the hash function was chosen carefully.\r\n\r\nAlgorithm\r\n\r\nA simple implementation uses two iterations. In the first iteration, we add each element's value as a key and its index as a value to the hash table. Then, in the second iteration, we check if each element's complement (targetâˆ’nums[i]) exists in the hash table. If it does exist, we return current element's index and its complement's index. Beware that the complement must not be nums[i] itself!\r\n\r\n\r\n***CODE***\r\n\r\n```\r\nclass Solution:\r\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n        seen = dict()\r\n        for i, b in enumerate(nums):\r\n            a = target - b\r\n            if a in seen:\r\n                return [seen[a], i]\r\n            else:\r\n                seen[b] = i\r\n```","thumbnail":"1705391804221-740226910-lc.png","stars":2,"category":["hash"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a645fd1e250afdee0467a1","title":"Add Two Numbers (Linked List)","slug":"add-numbers-ll","description":"`https://leetcode.com/problems/add-two-numbers/description/`\r\n\r\nPretty self explanatory code.\r\n\r\n```\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def addTwoNumbers(self, l1, l2):\r\n        carry = 0\r\n        n = res = ListNode(0)\r\n        while l1 or l2 or carry:\r\n            if l1:\r\n                carry += l1.val\r\n                l1 = l1.next\r\n            if l2:\r\n                carry += l2.val\r\n                l2 = l2.next\r\n            carry, val = divmod(carry, 10)\r\n            n.next = ListNode(val)\r\n            n = n.next\r\n        return res.next\r\n```","thumbnail":"1705395708890-522364645-lc.png","stars":4,"category":["linked-list"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a64b291e250afdee046816","title":"Longest Substring without repetitions","slug":"-longest-ss-no-repeat","description":"`https://leetcode.com/problems/longest-substring-without-repeating-characters/`\r\n\r\nSimple Sliding Window:\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    int lengthOfLongestSubstring(string s, unordered_map<char, int> mp = {}, int ln = 0) {\r\n        for(int i = 0, j = 0; j < s.size(); ++j) {\r\n            mp[s[j]]++;\r\n            if(mp.size() == j-i+1) ln = max(ln, j-i+1);\r\n            while(mp.size() < j-i+1) {\r\n                if(!--mp[s[i++]]) mp.erase(s[i-1]);\r\n            }\r\n        }\r\n        return ln;\r\n    }\r\n};\r\n```","thumbnail":"1705397033555-785197166-lc.png","stars":5,"category":["sliding-window"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a65be61e250afdee046827","title":"3Sum","slug":"3sum","description":"https://leetcode.com/problems/3sum/description/\r\n\r\nSimple Hashset:\r\n\r\n```\r\nclass Solution:\r\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\r\n        ans = set()\r\n        vis = set()\r\n        for i in range(len(nums)):\r\n            for j in range(i+1,len(nums)):\r\n                n1 = nums[i]\r\n                n2 = nums[j]\r\n                n3 = -n1-n2\r\n                if n3 in vis:\r\n                    ans.add(tuple(sorted([n1, n2, n3])))\r\n            vis.add(nums[i])\r\n        return ans\r\n```","thumbnail":"1705401318533-838473608-lc.png","stars":3,"category":["hash"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a65c891e250afdee04682f","title":"4Sum","slug":"4sum","description":"`https://leetcode.com/problems/4sum/description/`\r\n\r\nAgain simple hashset:\r\n\r\n```\r\nclass Solution:\r\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\r\n        ans = set()\r\n        vis = set()\r\n        for i in range(len(nums)):\r\n            for j in range(i+1, len(nums)):\r\n                for k in range(j+1, len(nums)):\r\n                    n1 = nums[i]\r\n                    n2 = nums[j]\r\n                    n3 = nums[k]\r\n                    n4 = target-(n1+n2+n3)\r\n                    if n4 in vis:\r\n                        ans.add(tuple(sorted([n1, n2, n3, n4])))\r\n            vis.add(nums[i])\r\n        return ans\r\n```","thumbnail":"1705401481152-647329417-lc.png","stars":2,"category":["hash"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a65d9d1e250afdee046835","title":"Combination Sum","slug":"comb-sum-1","description":"`https://leetcode.com/problems/combination-sum/description/`\r\n\r\nVery nice recursion:\r\n\r\n```\r\nclass Solution:\r\n    def dfs(self, nums, res, path, target, index):\r\n        if target < 0: return\r\n        if target == 0: res.append(path)\r\n        for i in range(index, len(nums)):\r\n            self.dfs(nums, res, path+[nums[i]], target-nums[i], i)\r\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\r\n        candidates.sort()\r\n        res = []\r\n        self.dfs(candidates, res, [], target, 0)\r\n        return res\r\n```","thumbnail":"1705401757249-433695925-lc.png","stars":4,"category":["dfs"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65a65dd71e250afdee046839","title":"Combination Sum - II","slug":"comb-sum-2","description":"`https://leetcode.com/problems/combination-sum-ii/description/`\r\n\r\nAgain very good:\r\n\r\n```\r\nclass Solution:\r\n    def dfs(self, nums, res, path, target, index):\r\n        if target < 0: return\r\n        if target == 0: res.append(path)\r\n        for i in range(index, len(nums)):\r\n            if i > index and nums[i] == nums[i-1]:\r\n                continue\r\n            self.dfs(nums, res, path+[nums[i]], target-nums[i], i+1)\r\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\r\n        candidates.sort()\r\n        res = []\r\n        self.dfs(candidates, res, [], target, 0)\r\n        return res\r\n```","thumbnail":"1705401815571-36026569-lc.png","stars":5,"category":["dfs"],"createdAt":"2024-01-16T04:39:35.570Z","__v":0},{"_id":"65acee938f4b05d18a8c361f","title":"aeef","slug":"sef","description":"efaf","thumbnail":"1705832083236-891991878-lc.png","stars":4,"category":["esfe"],"createdAt":"2024-01-21T10:14:32.543Z","__v":0}]